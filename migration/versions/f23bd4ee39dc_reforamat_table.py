"""reforamat table

Revision ID: f23bd4ee39dc
Revises: 8d358f244c08
Create Date: 2024-05-30 16:52:06.981297

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "f23bd4ee39dc"
down_revision: Union[str, None] = "8d358f244c08"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_Token_id", table_name="Token")
    op.drop_index("ix_Token_refreshToken", table_name="Token")
    op.drop_table("Token")
    op.add_column("User", sa.Column("hashed_password", sa.String(), nullable=True))
    op.add_column("User", sa.Column("user_name", sa.String(), nullable=True))
    op.drop_constraint("User_rndstr_key", "User", type_="unique")
    op.drop_constraint("User_userName_key", "User", type_="unique")
    op.create_unique_constraint(None, "User", ["user_name"])
    op.drop_column("User", "userName")
    op.drop_column("User", "hashedPassword")
    op.drop_column("User", "rndstr")
    op.drop_column("User", "isAdmin")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "User", sa.Column("isAdmin", sa.BOOLEAN(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "User", sa.Column("rndstr", sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "User",
        sa.Column("hashedPassword", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "User", sa.Column("userName", sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.drop_constraint(None, "User", type_="unique")
    op.create_unique_constraint("User_userName_key", "User", ["userName"])
    op.create_unique_constraint("User_rndstr_key", "User", ["rndstr"])
    op.drop_column("User", "user_name")
    op.drop_column("User", "hashed_password")
    op.create_table(
        "Token",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('\"Token_id_seq\"'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("refreshToken", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("userId", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["userId"], ["User.id"], name="Token_userId_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="Token_pkey"),
    )
    op.create_index("ix_Token_refreshToken", "Token", ["refreshToken"], unique=False)
    op.create_index("ix_Token_id", "Token", ["id"], unique=False)
    # ### end Alembic commands ###
